# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nb-iZh9w7E4g1rEWFKhNGO8MfoXfQCpP

I used Google Colab. To upload the mobil.csv file after running first command select your file.
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import io

# read data
df = pd.read_csv(io.StringIO(uploaded['mobil.csv'].decode('utf-8')), sep='\t')
print(df.head())

kategorik_degiskenler = df.select_dtypes(include=['object']).drop(columns=['FiyatAraligi', 'Renk'])

for degisken in kategorik_degiskenler.columns:
    plt.figure(figsize=(10,6))
    sns.countplot(x='FiyatAraligi', hue=degisken, data=df)
    plt.title(f'{degisken} Değişkenine Göre Fiyat Aralığı Dağılımı')
    plt.show()

# Turning ',' to '.'
for column in df.columns:
    if df[column].dtype == 'object':
        try:
            df[column] = df[column].str.replace(',', '.').astype(float)
        except ValueError:
            continue  # if not pass that value

# Print for checking
print(df.head())

#Check by plotting.
#After investigating plots, I decided which values will I use.
sayisal_degiskenler = df.select_dtypes(include=['float64', 'int64'])

for degisken in sayisal_degiskenler.columns:
    if degisken != 'Unnamed: 0':  # 'Unnamed: 0' sütununu atlamak için
        plt.figure(figsize=(10,6))
        sns.boxplot(x='FiyatAraligi', y=degisken, data=df)
        plt.title(f'{degisken} Değişkenine Göre Fiyat Aralığı')
        plt.show()

#install libraries
!pip install scikit-learn

# Turn ',' into '.'
for column in df.columns:
    if df[column].dtype == 'object':
        try:
            df[column] = df[column].str.replace(',', '.').astype(float)
        except ValueError:
            continue

# check
print(df.head())

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import LabelEncoder
from sklearn.impute import SimpleImputer
import pandas as pd

# Turn categoric variables into numbers
label_encoders = {}
for categorical_col in ['Bluetooth', 'CiftHat', '4G', 'Dokunmatik', 'WiFi']:
    label_encoders[categorical_col] = LabelEncoder()
    df[categorical_col] = label_encoders[categorical_col].fit_transform(df[categorical_col])

# choose properties to use
#I dropped the values that has no correlation with price.
X = df.drop(columns=['Unnamed: 0', 'MikroislemciHizi', 'Kalinlik', 'BataryaOmru', '3G', 'FiyatAraligi', 'Renk'])
y = df['FiyatAraligi']

# Fill with median if missing
imputer = SimpleImputer(strategy='median')
X_imputed = pd.DataFrame(imputer.fit_transform(X), columns=X.columns)

# Divide into test and train
X_train, X_test, y_train, y_test = train_test_split(X_imputed, y, test_size=0.2, random_state=42)

# Random Forest parameters
param_grid = {
    'n_estimators': [50, 100, 150, 200],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

# GridSearchCV model
grid_search = GridSearchCV(estimator=RandomForestClassifier(random_state=42),
                           param_grid=param_grid,
                           cv=3, n_jobs=-1, verbose=2, scoring='accuracy')

# train
grid_search.fit(X_train, y_train)

# choose best parameters
print("En iyi parametreler: ", grid_search.best_params_)

# train according to chooosen parameters
best_grid = grid_search.best_estimator_

# Measure the performance
y_pred = best_grid.predict(X_test)
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))